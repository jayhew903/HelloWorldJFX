package Controller;
/**Controller class for the add appointment GUI. */
import Database.DBAppointment;
import Database.DBContacts;
import Database.DBCustomers;
import Database.DBUser;
import Model.Contacts;
import Model.Customers;
import Model.Users;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import javafx.scene.control.DatePicker;
import javax.swing.text.DateFormatter;
import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ResourceBundle;

public class AddAptController implements Initializable {
    /**
     * This is the text field to type the appointment ID.
     * This is disabled and the ID is autogenerated.
     * */
    @FXML
    private TextField aptIdTxt;
    /**
     * button to cancel the added appointment.
     * */
    @FXML
    private Button cancelBtn;
    /**
     * this is the contacts combo box.
     * */
    @FXML
    private ComboBox<Contacts> contactCB;
    /**
     * this is the customer combo box.
     * */
    @FXML
    private ComboBox<Customers> customerIDCB;
    /**
     * this is the text field to input appointment description.
     * */
    @FXML
    private TextField descTxt;
    /**
     * this is the date picker to selected the end date for the appointment.
     * */
    @FXML
    private DatePicker endDateDP;
    /**
     * This is the text field to input the end time of the appointment.
     * */
    @FXML
    private TextField endTimeTxt;
    /**
     * this is the text field to input the location of the appointment.
     * */
    @FXML
    private TextField locTxt;
    /**
     * button to save the inputted appointment data.
     * */
    @FXML
    private Button saveBtn;
    /**
     * date picker to select the start date for the appointment.
     * */
    @FXML
    private DatePicker startDateDP;
    /**
     * text field to input the start time of the appointment.
     * */
    @FXML
    private TextField startTimeTxt;
    /**
     * text field to input the title of the appointment.
     * */
    @FXML
    private TextField titleTxt;
    /**
     * text field to input the type of the appointment.
     * */
    @FXML
    private TextField typeTxt;
    /**
     * combo box to selected the user for the appointment.
     * */
    @FXML
    private ComboBox<Users> userIdCB;
    /**
     * This is the cancel appointment button will direct user back to the appointment screen
     * @param event this action event will
     * @throws IOException
     * */
    @FXML
    void cancelApt(ActionEvent event) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("../View/AptSchedulerView.fxml"));
        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.show();
    }
    /**
     * save button will save the inputted information to the appointments table database
     * selecting this will direct user to the appointment scheduler screen
     * Alerts to ensure data is inputted in all locations.
     * Alerts to ensure the selected start and end time are within the business hours (8Am-10PM EST)
     * Alerts to ensure there is no overlap for customers appointment.
     * @param event
     * @throws IOException
     * */
    @FXML
    void saveApt(ActionEvent event) throws IOException {
        try {
            String title = titleTxt.getText();
            String description = descTxt.getText();
            String location = locTxt.getText();
            String type = typeTxt.getText();
            Contacts contacts = contactCB.getValue();
            Customers customers = customerIDCB.getValue();
            Users users = userIdCB.getValue();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
            LocalDate startDate = startDateDP.getValue();
            LocalDate endDate = endDateDP.getValue();
            LocalTime startTime = LocalTime.parse(startTimeTxt.getText(), formatter);
            LocalDateTime start = LocalDateTime.of(startDate, startTime);
            LocalTime endTime = LocalTime.parse(endTimeTxt.getText(), formatter);
            LocalDateTime end = LocalDateTime.of(endDate, endTime);
            ZonedDateTime convertStartTime = start.atZone(ZoneId.systemDefault());
            ZonedDateTime startTimeEST = convertStartTime.withZoneSameInstant(ZoneId.of("America/New_York"));
            LocalDateTime ldtStartEST = startTimeEST.toLocalDateTime();
            LocalDateTime businessHourStart = LocalDateTime.of(startDateDP.getValue(), LocalTime.of(8,0));
            ZonedDateTime convertEndTime = end.atZone(ZoneId.systemDefault());
            ZonedDateTime endTimeEST = convertEndTime.withZoneSameInstant(ZoneId.of("America/New_York"));
            LocalDateTime ldtEndEST = endTimeEST.toLocalDateTime();
            LocalDateTime businessHourEnd = LocalDateTime.of(endDateDP.getValue(), LocalTime.of(22,0));

            if (contacts == null){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Contact is blank, please make a selection");
                alert.showAndWait();
                return;
            }

            if (customers == null){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Customer is blank, please make a selection");
                alert.showAndWait();
                return;
            }

            if (users == null){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("User is blank, please make a selection");
                alert.showAndWait();
                return;
            }

            if (title.isBlank()) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Title is blank, please input data");
                alert.showAndWait();
                return;
            }
            if (description.isBlank()) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Description is blank, please input data");
                alert.showAndWait();
                return;
            }
            if (location.isBlank()) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Location is blank, please input data");
                alert.showAndWait();
                return;
            }
            if (type.isBlank()) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Type is blank, please input data");
                alert.showAndWait();
                return;
            }
            if(startDateDP.getValue() == null){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Start Date is blank, please input data");
                alert.showAndWait();
                return;
            }
            if(endDateDP.getValue() == null){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("End Date is blank, please input data");
                alert.showAndWait();
                return;
            }
            if(ldtStartEST.isAfter(ldtEndEST)){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Appointment start time is after the end time.");
                alert.showAndWait();
                return;
            }
            if(ldtStartEST.isEqual(ldtEndEST)){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Appointment start time is the same as the end time");
                alert.showAndWait();
                return;
            }
            if (ldtEndEST.isBefore(ldtStartEST)) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Appointment end time is before the start time");
                alert.showAndWait();
                return;
            }
            if(ldtStartEST.isBefore(businessHourStart)){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("Start time is outside of business hours");
                alert.showAndWait();
                return;
            }
            if(ldtEndEST.isAfter(businessHourEnd)){
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("Error Dialog");
                alert.setContentText("End time is outside of business hours");
                alert.showAndWait();
                return;
            }

            if(AptSchedulerController.checkAptOverlap(customers.getCustomerId(), 0, start, end) == true){
                return;
            }

            DBAppointment.insert(title, description, location, type, contacts.getContactId(), customers.getCustomerId(), users.getUserId(), startDate, endDate, startTime, endTime);

        }
        catch(SQLException | DateTimeParseException e){
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error Dialog");
            alert.setContentText("Please enter valid fields -" + "Note: times need to be in HH:mm format.");
            alert.showAndWait();
            return;
            //e.printStackTrace();
        }

        Parent root = FXMLLoader.load(getClass().getResource("../View/AptSchedulerView.fxml"));
        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.show();

    }
/**
 * Sets the combo boxes to the correct information when the screen is opened.
 * */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        ObservableList<Users> userList = DBUser.getAllUsers();
        userIdCB.setItems(userList);

        ObservableList<Contacts> contactList = DBContacts.getTheContacts();
        contactCB.setItems(contactList);

        ObservableList<Customers> cxList = DBCustomers.getTheCustomers();
        customerIDCB.setItems(cxList);
    }
}
