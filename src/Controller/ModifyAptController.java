package Controller;
/**Controller for the modify appointments GUI. */
import Database.DBAppointment;
import Database.DBContacts;
import Database.DBCustomers;
import Model.Appointments;
import Model.Contacts;
import Model.Customers;
import Model.Users;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import Database.DBUser;

import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.ResourceBundle;

public class ModifyAptController implements Initializable {
    /**
     * appointment Id text field
     * this is disabled and cannot be edited
     * appointment ID is autogenerated from the database.
     * */
    @FXML
    private TextField aptIdTxt;
    /**
     * cancel button
     * */
    @FXML
    private Button cancelBtn;
    /**
     * Contacts combo box.
     * */
    @FXML
    private ComboBox<Contacts> contactCB;
    /**
     * customer combo box.
     * */
    @FXML
    private ComboBox<Customers> customerIdCB;
    /**
     * description text field
     * */
    @FXML
    private TextField descTxt;
    /**
     * Date picker for the end date.
     * */
    @FXML
    private DatePicker endDateDP;
    /**
     * End time text field.
     * */
    @FXML
    private TextField endTimeTxt;
    /**
     * location text field.
     * */
    @FXML
    private TextField locTxt;
    /**
     * save button.
     * */
    @FXML
    private Button saveBtn;
    /**
     * save time text field.
     * */
    @FXML
    private TextField startTimeTxt;
    /**
     * date picker for the start date
     * */
    @FXML
    private DatePicker startDateDP;
    /**
     * Title text field
     * */
    @FXML
    private TextField titleTxt;
    /**
     * type text field
     * */
    @FXML
    private TextField typeTxt;
    /**
     * user combo box
     * */
    @FXML
    private ComboBox<Users> userIdCB;

    /**
     * This method collects the information from the selected appointment.
     * That information is correctly displayed in the correct location.
     * */
    public void setApt(int index, Appointments appointments) {
        aptIdTxt.setText(String.valueOf(appointments.getAppointmentId()));
        titleTxt.setText(appointments.getTitle());
        descTxt.setText(appointments.getDescription());
        locTxt.setText(appointments.getLocation());
        typeTxt.setText(appointments.getType());
        for(Contacts c: contactCB.getItems()){
            if(c.getContactId() == appointments.getContactId()){
                contactCB.setValue(c);
                break;
            }
        }
        for(Users u: userIdCB.getItems()){
            if(u.getUserId() == appointments.getUserId()){
                userIdCB.setValue(u);
                break;
            }
        }
        for (Customers cx: customerIdCB.getItems()){
            if (cx.getCustomerId() == appointments.getCustomerId()){
                customerIdCB.setValue(cx);
                break;
            }
        }

        startDateDP.setValue(appointments.getStartTime().toLocalDate());
        endDateDP.setValue(appointments.getEndTime().toLocalDate());
        startTimeTxt.setText(String.valueOf(appointments.getStartTime().toLocalTime()));
        endTimeTxt.setText(String.valueOf(appointments.getEndTime().toLocalTime()));
    }
    /**
     * Cancel button.
     * This will direct user back to the appointment screen.
     * selecting this will not save any updated information.
     * warning message does occur.
     * @param event
     * @throws IOException
     * */
    @FXML
    void cancelApt(ActionEvent event) throws IOException {
        Alert alert = new Alert(Alert.AlertType.WARNING);
        alert.setTitle("Warning Dialog");
        alert.setContentText("Cancelling will not save any modified data");
        alert.showAndWait();

        Parent root = FXMLLoader.load(getClass().getResource("../View/AptSchedulerView.fxml"));
        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.show();

    }
    /**
     * save button
     * this will save the modify appointment information, and update it in the database.
     * will check to make sure all data is inputted
     * will verify there are no overlapping appointments
     * will verify appointment time is within business hours (8AM-10PM EST).
     * @param event
     * @throws IOException
     * */
    @FXML
    void saveApt(ActionEvent event) throws IOException {
            try {
                int appointmentId = Integer.parseInt(aptIdTxt.getText());
                String title = titleTxt.getText();
                String description = descTxt.getText();
                String location = locTxt.getText();
                String type = typeTxt.getText();
                Contacts contacts = contactCB.getValue();
                Customers customers = customerIdCB.getValue();
                Users users = userIdCB.getValue();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
                LocalDate startDate = startDateDP.getValue();
                LocalDate endDate = endDateDP.getValue();
                LocalTime startTime = LocalTime.parse(startTimeTxt.getText(), formatter);
                LocalDateTime start = LocalDateTime.of(startDate, startTime);
                LocalTime endTime = LocalTime.parse(endTimeTxt.getText(), formatter);
                LocalDateTime end = LocalDateTime.of(endDate, endTime);
                ZonedDateTime convertStartTime = start.atZone(ZoneId.systemDefault());
                ZonedDateTime startTimeEST = convertStartTime.withZoneSameInstant(ZoneId.of("America/New_York"));
                LocalDateTime ldtStartEST = startTimeEST.toLocalDateTime();
                LocalDateTime businessHourStart = LocalDateTime.of(startDateDP.getValue(), LocalTime.of(8,0));
                ZonedDateTime convertEndTime = end.atZone(ZoneId.systemDefault());
                ZonedDateTime endTimeEST = convertEndTime.withZoneSameInstant(ZoneId.of("America/New_York"));
                LocalDateTime ldtEndEST = endTimeEST.toLocalDateTime();
                LocalDateTime businessHourEnd = LocalDateTime.of(endDateDP.getValue(), LocalTime.of(22,0));

                if (contacts == null){
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Contact is blank, please make a selection");
                    alert.showAndWait();
                    return;
                }

                if (customers == null){
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Customer is blank, please make a selection");
                    alert.showAndWait();
                    return;
                }

                if (users == null){
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("User is blank, please make a selection");
                    alert.showAndWait();
                    return;
                }

                if (title.isBlank()) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Title is blank, please input data");
                    alert.showAndWait();
                    return;
                }
                if (description.isBlank()) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Description is blank, please input data");
                    alert.showAndWait();
                    return;
                }
                if (location.isBlank()) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Location is blank, please input data");
                    alert.showAndWait();
                    return;
                }
                if (type.isBlank()) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Type is blank, please input data");
                    alert.showAndWait();
                    return;
                }
                if(startDateDP.getValue() == null){
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Start Date is blank, please input data");
                    alert.showAndWait();
                    return;
                }
                if(endDateDP.getValue() == null){
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("End Date is blank, please input data");
                    alert.showAndWait();
                    return;
                }
                if(ldtStartEST.isAfter(ldtEndEST)){
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Appointment start time is after the end time.");
                    alert.showAndWait();
                    return;
                }
                if(ldtStartEST.isEqual(ldtEndEST)){
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Appointment start time is the same as the end time");
                    alert.showAndWait();
                    return;
                }
                if (ldtEndEST.isBefore(ldtStartEST)) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Appointment end time is before the start time");
                    alert.showAndWait();
                    return;
                }
                if(ldtStartEST.isBefore(businessHourStart)){
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("Start time is outside of business hours");
                    alert.showAndWait();
                    return;
                }
                if(ldtEndEST.isAfter(businessHourEnd)){
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("Error Dialog");
                    alert.setContentText("End time is outside of business hours");
                    alert.showAndWait();
                    return;
                }



                DBAppointment.update(appointmentId, title, description, location, type, contacts.getContactId(), customers.getCustomerId(), users.getUserId(), startDate, startTime, endDate, endTime);
            }
            catch(SQLException e){
                e.printStackTrace();
            }

        Parent root = FXMLLoader.load(getClass().getResource("../View/AptSchedulerView.fxml"));
        Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        Scene scene = new Scene(root);
        stage.setScene(scene);
        stage.show();


    }

    /**
     * Sets the combo boxes to display the correct options.
     * */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        ObservableList<Users> userList = DBUser.getAllUsers();
        userIdCB.setItems(userList);

        ObservableList<Contacts> contactList = DBContacts.getTheContacts();
        contactCB.setItems(contactList);

        ObservableList<Customers>  cxList = DBCustomers.getTheCustomers();
        customerIdCB.setItems(cxList);


    }
}
